
#Creates the class of all the items
class ItemToPurchase:
    def __init__(self, item_name="none", item_price=0, item_quantity=0, item_description="none"):
        self.item_name = item_name
        self.item_price = item_price
        self.item_quantity = item_quantity
        self.item_description = item_description

    def print_item_cost(self):
        total_cost = self.item_price * self.item_quantity
        print(f"{self.item_name} {self.item_quantity} @ ${self.item_price} = ${total_cost}")

    def print_item_description(self):
        print(f"{self.item_name}: {self.item_description}")

# Creates the items and takes input from the user
if __name__ == '__main__':
    print("Item 1")
    item1_name = input("Enter the name of the item: ")
    item1_description = input("Enter the description of the item: ")
    item1_price = float(input("Enter the price of the item: "))
    item1_quantity = int(input("Enter the quantity of the item: "))
    item1 = ItemToPurchase(item1_name, item1_price, item1_quantity, item1_description)

    

    print("\nTOTAL COST")
    item1.print_item_cost()
    print("\nItem Descriptions")
    item1.print_item_description()

# Defines the ItemToPurchase class to identify items for the shopping cart
class ItemToPurchase:
    def __init__(self, item_name="none", item_price=0, item_quantity=0, item_description="none"):
        self.item_name = item_name
        self.item_price = item_price
        self.item_quantity = item_quantity
        self.item_description = item_description

    def print_item_description(self):
        # Prints the item name and description
        print(f"{self.item_name}: {self.item_description}")

# Defines the ShoppingCart class
class ShoppingCart:
    def __init__(self, customer_name="none", current_date="January 1, 2020"):
        self.customer_name = customer_name
        self.current_date = current_date
        self.cart_items = []
        
# Adds an item to the shopping cart
    def add_item(self, item):
        self.cart_items.append(item)
# Remove an item from the shopping cart by item name
    def remove_item(self, item_name):
        for item in self.cart_items:
            if item.item_name == item_name:
                self.cart_items.remove(item)
                return
        print("Item not found in cart. Nothing removed.")
# Modifies an item's quantity in the shopping cart
    def modify_item(self, item): 
        for i in range(len(self.cart_items)):
            if self.cart_items[i].item_name == item.item_name:
                self.cart_items[i] = item
                return
        print("Item not found in cart. Nothing modified.")
 # Displays the total number of items from the shopping cart
    def get_num_items_in_cart(self):   
        return sum(item.item_quantity for item in self.cart_items)
    
# Adds the total cost of the itmes in the shopping cart
    def get_cost_of_cart(self): 
        total_cost = sum(item.item_quantity * item.item_price for item in self.cart_items)
        return total_cost
    
# Prints the item description and the total cost from the shopping cart
    def print_total(self):       
        total_cost = self.get_cost_of_cart()
        print(f"{self.customer_name}'s Shopping Cart - {self.current_date}")
        print(f"Number of Items: {self.get_num_items_in_cart()}\n")
        if self.cart_items:
            for item in self.cart_items:
                print(f"{item.item_name} {item.item_quantity} @ ${item.item_price} = ${item.item_quantity * item.item_price}")
            print(f"\nTotal: ${total_cost}")
        else:
            print("The shopping cart is empty")

# Prints item descriptions of the item in the shopping cart
    def print_descriptions(self):
        print(f"{self.customer_name}'s Shopping Cart - {self.current_date}\n")
        print("Item Descriptions")
        for item in self.cart_items:
            item.print_item_description()
            print()

# Defines a function to display all the menu options
def print_menu():
    print("MENU")
    print("a - Add item to cart")
    print("r - Remove item from cart")
    print("c - Update item quantity")
    print("i - Output items' descriptions")
    print("o - Output shopping cart")
    print("q - Quit")

# Defines a function to dispaly the options of the menu
# and executes according to user input

def execute_menu(choice, cart):
    if choice == 'a':
        print("ADD ITEM TO CART")
        item_name = input("Enter the item name:\n")
        item_description = input("Enter the item description:\n")
        item_price = float(input("Enter the item price:\n"))
        item_quantity = int(input("Enter the item quantity:\n"))
        item = ItemToPurchase(item_name, item_price, item_quantity, item_description)
        cart.add_item(item)
    elif choice == 'r':
        print("Remove item from cart")
        item_name = input("Enter name of item to remove:\n")
        cart.remove_item(item_name)
    elif choice == 'c':
        print("Change the item quanity")
        item_name = input("Enter the item name:\n")
        new_quantity = int(input("Enter the updated quantity:\n"))
        item = ItemToPurchase(item_name, 0, new_quantity)
        cart.modify_item(item)
    elif choice == 'i':
        cart.print_descriptions()
    elif choice == 'o':
        print("Contents of the shopping cart")
        cart.print_total()
    elif choice == 'q':
        pass
    else:
        print("Invalid option. Please try again.")

# The main program to execute
if __name__ == '__main__':
    customer_name = input("Enter customer's name:\n")
    current_date = input("Enter today's date:\n")
    print(f"Customer name: {customer_name}")
    print(f"Today's date: {current_date}\n")
    
    shopping_cart = ShoppingCart(customer_name, current_date)
    choice = ''

   #While l oop to continue the menu options 
    while choice != 'q':
        print_menu()
        choice = input("\nChoose an option: ")
        execute_menu(choice, shopping_cart)